[1mdiff --git a/src/main/java/com/example/spring_boot/config/SecurityConfig.java b/src/main/java/com/example/spring_boot/config/SecurityConfig.java[m
[1mindex d30a008..1221037 100644[m
[1m--- a/src/main/java/com/example/spring_boot/config/SecurityConfig.java[m
[1m+++ b/src/main/java/com/example/spring_boot/config/SecurityConfig.java[m
[36m@@ -1,117 +1,117 @@[m
[31m-//package com.example.spring_boot.config;[m
[31m-//[m
[31m-//import com.example.spring_boot.jwt.JwtFilter;[m
[31m-//import org.springframework.beans.factory.annotation.Autowired;[m
[31m-//import org.springframework.context.annotation.Bean;[m
[31m-//import org.springframework.context.annotation.Configuration;[m
[31m-//import org.springframework.security.authentication.AuthenticationManager;[m
[31m-//import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;[m
[31m-//import org.springframework.security.config.annotation.web.builders.HttpSecurity;[m
[31m-////import org.springframework.security.config.annotation.web.builders.WebSecurity;[m
[31m-//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;[m
[31m-//import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;[m
[31m-//import org.springframework.security.config.http.SessionCreationPolicy;[m
[31m-//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;[m
[31m-//import org.springframework.security.web.SecurityFilterChain;[m
[31m-//import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;[m
[31m-//[m
[31m-////import static com.example.database_jpa.jwt.Role.ADMIN;[m
[31m-////import static com.example.database_jpa.jwt.Role.MANAGER;[m
[31m-//[m
[31m-//@Configuration[m
[31m-//@EnableWebSecurity[m
[31m-//public class SecurityConfig {[m
[31m-//[m
[31m-//    private final JwtFilter jwtFilter;[m
[31m-//[m
[31m-//    @Autowired[m
[31m-//    public SecurityConfig(JwtFilter jwtFilter) {[m
[31m-//        this.jwtFilter = jwtFilter;[m
[31m-//    }[m
[31m-//[m
[31m-//    @Bean[m
[31m-//    public BCryptPasswordEncoder passwordEncoder() {[m
[31m-//        return new BCryptPasswordEncoder(15);[m
[31m-//    }[m
[31m-//[m
[31m-//[m
[31m-//[m
[31m-//[m
[31m-//        private static final String[] SWAGGER_PATHS = {[m
[31m-//                "/swagger-ui/**",[m
[31m-//                "/v3/api-docs/**",[m
[31m-//                "/swagger-ui.html",[m
[31m-//                "/swagger-resources/**",[m
[31m-//                "/webjars/**",[m
[31m-//                "/configuration/**",[m
[31m-//                "/web/authors/**"[m
[31m-//        };[m
[31m-//[m
[31m-//        private static final String[] PUBLIC_PATHS = {[m
[31m-//                "/register",[m
[31m-//                "/web/login",[m
[31m-//                "/api/web/login",[m
[31m-//                "/api/web/register",[m
[31m-//                "/WEB-INF/jsp/**"[m
[31m-//[m
[31m-//[m
[31m-//        };[m
[31m-//[m
[31m-//    private static final String[] PROTECTED_PATHS = {[m
[31m-//            "/books/**",[m
[31m-//            "/authors/**",[m
[31m-//            "/web/authors/**",[m
[31m-//            "/web/books/**",[m
[31m-//            "/api/web/index"[m
[32m+[m[32mpackage com.example.spring_boot.config;[m
[32m+[m
[32m+[m[32mimport com.example.spring_boot.jwt.JwtFilter;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.annotation.Bean;[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationManager;[m
[32m+[m[32mimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.builders.HttpSecurity;[m
[32m+[m[32m//import org.springframework.security.config.annotation.web.builders.WebSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;[m
[32m+[m[32mimport org.springframework.security.config.http.SessionCreationPolicy;[m
[32m+[m[32mimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.web.SecurityFilterChain;[m
[32m+[m[32mimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;[m
[32m+[m
[32m+[m[32m//import static com.example.database_jpa.jwt.Role.ADMIN;[m
[32m+[m[32m//import static com.example.database_jpa.jwt.Role.MANAGER;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32m@EnableWebSecurity[m
[32m+[m[32mpublic class SecurityConfig {[m
[32m+[m
[32m+[m[32m    private final JwtFilter jwtFilter;[m
[32m+[m
[32m+[m[32m    @Autowired[m
[32m+[m[32m    public SecurityConfig(JwtFilter jwtFilter) {[m
[32m+[m[32m        this.jwtFilter = jwtFilter;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Bean[m
[32m+[m[32m    public BCryptPasswordEncoder passwordEncoder() {[m
[32m+[m[32m        return new BCryptPasswordEncoder(15);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m        private static final String[] SWAGGER_PATHS = {[m
[32m+[m[32m                "/swagger-ui/**",[m
[32m+[m[32m                "/v3/api-docs/**",[m
[32m+[m[32m                "/swagger-ui.html",[m
[32m+[m[32m                "/swagger-resources/**",[m
[32m+[m[32m                "/webjars/**",[m
[32m+[m[32m                "/configuration/**",[m
[32m+[m[32m                "/web/authors/**"[m
[32m+[m[32m        };[m
[32m+[m
[32m+[m[32m        private static final String[] PUBLIC_PATHS = {[m
[32m+[m[32m                "/register",[m
[32m+[m[32m                "/web/login",[m
[32m+[m[32m                "/api/web/login",[m
[32m+[m[32m                "/api/web/register",[m
[32m+[m[32m                "/WEB-INF/jsp/**"[m
[32m+[m
[32m+[m
[32m+[m[32m        };[m
[32m+[m
[32m+[m[32m    private static final String[] PROTECTED_PATHS = {[m
[32m+[m[32m            "/books/**",[m
[32m+[m[32m            "/authors/**",[m
[32m+[m[32m            "/web/authors/**",[m
[32m+[m[32m            "/web/books/**",[m
[32m+[m[32m            "/api/web/index"[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    @Bean[m
[32m+[m[32m    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {[m
[32m+[m[32m        http[m
[32m+[m[32m                .csrf(AbstractHttpConfigurer::disable)[m
[32m+[m[32m                .sessionManagement(session ->[m
[32m+[m[32m                        session.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)[m
[32m+[m[32m                )[m
[32m+[m[32m                .authorizeHttpRequests(auth -> auth[m
[32m+[m[32m                        .requestMatchers(SWAGGER_PATHS).permitAll()[m
[32m+[m[32m                        .requestMatchers(PUBLIC_PATHS).permitAll()[m
[32m+[m[32m                        .requestMatchers("/WEB-INF/jsp/**").permitAll()[m
[32m+[m[32m                        .requestMatchers("/favicon.ico").permitAll()[m
[32m+[m[32m                        .requestMatchers(PROTECTED_PATHS).hasAnyRole("ADMIN", "USER")[m
[32m+[m[32m                        .anyRequest().authenticated()[m
[32m+[m[32m                )[m
[32m+[m[32m                .formLogin(form -> form[m
[32m+[m[32m                        .loginPage("/api/web/login")[m
[32m+[m[32m                        //.loginProcessingUrl("/api/web/login")[m
[32m+[m[32m                        .defaultSuccessUrl("/api/web/index", true)[m
[32m+[m[32m                        .failureUrl("/web/login?error=true")[m
[32m+[m[32m                        .permitAll()[m
[32m+[m[32m                )[m
[32m+[m[32m                .logout(logout -> logout[m
[32m+[m[32m                        .logoutUrl("/logout")[m
[32m+[m[32m                        .logoutSuccessUrl("/web/login")[m
[32m+[m[32m                        .permitAll()[m
[32m+[m[32m                )[m
[32m+[m[32m                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);[m
[32m+[m
[32m+[m[32m        return http.build();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m//    private static final String[] PUBLIC_PATHS = {[m
[32m+[m[32m//            "/register",[m
[32m+[m[32m//            "/web/login",[m
[32m+[m[32m//            "/api/web/login",[m
[32m+[m[32m//            "/WEB-INF/jsp/**",[m
[32m+[m[32m//            "/login",[m
[32m+[m[32m//            "/css/**",[m
[32m+[m[32m//            "/js/**",authoritystring[m
[32m+[m[32m//            "/images/**"[m
 //    };[m
[31m-//[m
[31m-//    @Bean[m
[31m-//    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {[m
[31m-//        http[m
[31m-//                .csrf(AbstractHttpConfigurer::disable)[m
[31m-//                .sessionManagement(session ->[m
[31m-//                        session.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)[m
[31m-//                )[m
[31m-//                .authorizeHttpRequests(auth -> auth[m
[31m-//                        .requestMatchers(SWAGGER_PATHS).permitAll()[m
[31m-//                        .requestMatchers(PUBLIC_PATHS).permitAll()[m
[31m-//                        .requestMatchers("/WEB-INF/jsp/**").permitAll()[m
[31m-//                        .requestMatchers("/favicon.ico").permitAll()[m
[31m-//                        .requestMatchers(PROTECTED_PATHS).hasAnyRole("ADMIN", "USER")[m
[31m-//                        .anyRequest().authenticated()[m
[31m-//                )[m
[31m-//                .formLogin(form -> form[m
[31m-//                        .loginPage("/api/web/login")[m
[31m-//                        //.loginProcessingUrl("/api/web/login")[m
[31m-//                        .defaultSuccessUrl("/api/web/index", true)[m
[31m-//                        .failureUrl("/web/login?error=true")[m
[31m-//                        .permitAll()[m
[31m-//                )[m
[31m-//                .logout(logout -> logout[m
[31m-//                        .logoutUrl("/logout")[m
[31m-//                        .logoutSuccessUrl("/web/login")[m
[31m-//                        .permitAll()[m
[31m-//                )[m
[31m-//                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);[m
[31m-//[m
[31m-//        return http.build();[m
[31m-//    }[m
[31m-//[m
[31m-////    private static final String[] PUBLIC_PATHS = {[m
[31m-////            "/register",[m
[31m-////            "/web/login",[m
[31m-////            "/api/web/login",[m
[31m-////            "/WEB-INF/jsp/**",[m
[31m-////            "/login",[m
[31m-////            "/css/**",[m
[31m-////            "/js/**",authoritystring[m
[31m-////            "/images/**"[m
[31m-////    };[m
[31m-//[m
[31m-//[m
[31m-//[m
[31m-//    @Bean[m
[31m-//    public AuthenticationManager authenticationManager(AuthenticationConfiguration auth) throws Exception {[m
[31m-//        return auth.getAuthenticationManager();[m
[31m-//    }[m
[31m-//}[m
\ No newline at end of file[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    @Bean[m
[32m+[m[32m    public AuthenticationManager authenticationManager(AuthenticationConfiguration auth) throws Exception {[m
[32m+[m[32m        return auth.getAuthenticationManager();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/resources/application.properties b/src/main/resources/application.properties[m
[1mindex 47e2946..265ee3e 100644[m
[1m--- a/src/main/resources/application.properties[m
[1m+++ b/src/main/resources/application.properties[m
[36m@@ -32,7 +32,7 @@[m [mspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect[m
 [m
 #spring.datasource.driver-class-name=org.postgresql.Driver[m
 [m
[31m-spring.jpa.hibernate.ddl-auto=create-drop[m
[32m+[m[32mspring.jpa.hibernate.ddl-auto=update[m
 [m
 spring.jpa.show-sql=true[m
 spring.mvc.view.prefix=/WEB-INF/jsp/[m
[1mdiff --git a/src/main/webapp/WEB-INF/jsp/register.jsp b/src/main/webapp/WEB-INF/jsp/register.jsp[m
[1mindex 63775be..b217cd2 100644[m
[1m--- a/src/main/webapp/WEB-INF/jsp/register.jsp[m
[1m+++ b/src/main/webapp/WEB-INF/jsp/register.jsp[m
[36m@@ -32,7 +32,7 @@[m
         <label>ADMIN</label>[m
     <br>[m
         <label>[m
[31m-            <input type="checkbox" name="role" value="USER" required>[m
[32m+[m[32m            <input type="checkbox" name="role" value="USER" >[m
         </label>[m
         <label> USER </label>[m
     </div>[m
